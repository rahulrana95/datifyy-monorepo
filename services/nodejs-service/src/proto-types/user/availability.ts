// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.28.3
// source: user/availability.proto

/* eslint-disable */
import type { DateType } from "../admin/revenue";
import type { PaginationRequest, PaginationResponse } from "../common/base";

/** Availability status */
export enum AvailabilitySlotStatus {
  AVAILABILITY_SLOT_STATUS_UNSPECIFIED = "AVAILABILITY_SLOT_STATUS_UNSPECIFIED",
  AVAILABILITY_SLOT_STATUS_ACTIVE = "AVAILABILITY_SLOT_STATUS_ACTIVE",
  AVAILABILITY_SLOT_STATUS_CANCELLED = "AVAILABILITY_SLOT_STATUS_CANCELLED",
  AVAILABILITY_SLOT_STATUS_COMPLETED = "AVAILABILITY_SLOT_STATUS_COMPLETED",
  AVAILABILITY_SLOT_STATUS_DELETED = "AVAILABILITY_SLOT_STATUS_DELETED",
}

/** Recurrence type */
export enum AvailabilityRecurrenceType {
  AVAILABILITY_RECURRENCE_TYPE_UNSPECIFIED = "AVAILABILITY_RECURRENCE_TYPE_UNSPECIFIED",
  AVAILABILITY_RECURRENCE_TYPE_NONE = "AVAILABILITY_RECURRENCE_TYPE_NONE",
  AVAILABILITY_RECURRENCE_TYPE_WEEKLY = "AVAILABILITY_RECURRENCE_TYPE_WEEKLY",
  AVAILABILITY_RECURRENCE_TYPE_CUSTOM = "AVAILABILITY_RECURRENCE_TYPE_CUSTOM",
}

/** Cancellation policy */
export enum AvailabilityCancellationPolicy {
  AVAILABILITY_CANCELLATION_POLICY_UNSPECIFIED = "AVAILABILITY_CANCELLATION_POLICY_UNSPECIFIED",
  AVAILABILITY_CANCELLATION_POLICY_FLEXIBLE = "AVAILABILITY_CANCELLATION_POLICY_FLEXIBLE",
  AVAILABILITY_CANCELLATION_POLICY_TWENTY_FOUR_HOURS = "AVAILABILITY_CANCELLATION_POLICY_TWENTY_FOUR_HOURS",
  AVAILABILITY_CANCELLATION_POLICY_FORTY_EIGHT_HOURS = "AVAILABILITY_CANCELLATION_POLICY_FORTY_EIGHT_HOURS",
  AVAILABILITY_CANCELLATION_POLICY_STRICT = "AVAILABILITY_CANCELLATION_POLICY_STRICT",
}

/** Booking status */
export enum AvailabilityBookingStatus {
  AVAILABILITY_BOOKING_STATUS_UNSPECIFIED = "AVAILABILITY_BOOKING_STATUS_UNSPECIFIED",
  AVAILABILITY_BOOKING_STATUS_PENDING = "AVAILABILITY_BOOKING_STATUS_PENDING",
  AVAILABILITY_BOOKING_STATUS_CONFIRMED = "AVAILABILITY_BOOKING_STATUS_CONFIRMED",
  AVAILABILITY_BOOKING_STATUS_CANCELLED = "AVAILABILITY_BOOKING_STATUS_CANCELLED",
  AVAILABILITY_BOOKING_STATUS_COMPLETED = "AVAILABILITY_BOOKING_STATUS_COMPLETED",
}

/** Selected activity */
export enum SelectedActivity {
  SELECTED_ACTIVITY_UNSPECIFIED = "SELECTED_ACTIVITY_UNSPECIFIED",
  SELECTED_ACTIVITY_COFFEE = "SELECTED_ACTIVITY_COFFEE",
  SELECTED_ACTIVITY_LUNCH = "SELECTED_ACTIVITY_LUNCH",
  SELECTED_ACTIVITY_DINNER = "SELECTED_ACTIVITY_DINNER",
  SELECTED_ACTIVITY_DRINKS = "SELECTED_ACTIVITY_DRINKS",
  SELECTED_ACTIVITY_MOVIE = "SELECTED_ACTIVITY_MOVIE",
  SELECTED_ACTIVITY_WALK = "SELECTED_ACTIVITY_WALK",
  SELECTED_ACTIVITY_ACTIVITY = "SELECTED_ACTIVITY_ACTIVITY",
  SELECTED_ACTIVITY_CASUAL = "SELECTED_ACTIVITY_CASUAL",
  SELECTED_ACTIVITY_FORMAL = "SELECTED_ACTIVITY_FORMAL",
}

/** Availability slot */
export interface AvailabilitySlot {
  id: string;
  userId: number;
  dateType: DateType;
  status: AvailabilitySlotStatus;
  date?: Date | undefined;
  startTime: string;
  endTime: string;
  timezone: string;
  recurrenceType: AvailabilityRecurrenceType;
  recurrenceDays: string[];
  recurrenceEndDate?: Date | undefined;
  maxBookings: number;
  currentBookings: number;
  durationMinutes: number;
  bufferTimeMinutes: number;
  location: string;
  venue: string;
  virtualLink: string;
  notes: string;
  preferredActivities: string[];
  cancellationPolicy: AvailabilityCancellationPolicy;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  isBooked: boolean;
  availabilityDate?: Date | undefined;
}

/** Availability booking */
export interface AvailabilityBooking {
  id: string;
  availabilitySlotId: string;
  hostUserId: number;
  guestUserId: number;
  status: AvailabilityBookingStatus;
  bookingDate?: Date | undefined;
  startTime: string;
  endTime: string;
  location: string;
  venue: string;
  virtualLink: string;
  activity: string;
  notes: string;
  cancellationReason: string;
  cancelledByUserId: number;
  cancelledAt?: Date | undefined;
  confirmedAt?: Date | undefined;
  completedAt?: Date | undefined;
  hostRating: number;
  guestRating: number;
  hostFeedback: string;
  guestFeedback: string;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

/** User availability preferences */
export interface UserAvailabilityPreferences {
  userId: number;
  isAvailable: boolean;
  preferredDateTypes: DateType[];
  defaultDurationMinutes: number;
  defaultBufferTimeMinutes: number;
  advanceBookingDays: number;
  minimumNoticeHours: number;
  maximumBookingsPerDay: number;
  maximumBookingsPerWeek: number;
  preferredLocations: string[];
  preferredActivities: string[];
  defaultCancellationPolicy: AvailabilityCancellationPolicy;
  autoConfirmBookings: boolean;
  sendReminders: boolean;
  reminderHoursBefore: number;
  blockedUserIds: string[];
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

/** Request messages */
export interface CreateAvailabilityRequest {
  dateType: DateType;
  date?: Date | undefined;
  startTime: string;
  endTime: string;
  timezone: string;
  recurrenceType: AvailabilityRecurrenceType;
  recurrenceDays: string[];
  recurrenceEndDate?: Date | undefined;
  maxBookings: number;
  durationMinutes: number;
  bufferTimeMinutes: number;
  location: string;
  venue: string;
  virtualLink: string;
  notes: string;
  preferredActivities: string[];
  cancellationPolicy: AvailabilityCancellationPolicy;
  isRecurring: boolean;
  availabilityDate?: Date | undefined;
}

export interface UpdateAvailabilityRequest {
  availabilitySlotId: string;
  dateType: DateType;
  date?: Date | undefined;
  startTime: string;
  endTime: string;
  timezone: string;
  maxBookings: number;
  durationMinutes: number;
  bufferTimeMinutes: number;
  location: string;
  venue: string;
  virtualLink: string;
  notes: string;
  preferredActivities: string[];
  cancellationPolicy: AvailabilityCancellationPolicy;
  status: AvailabilitySlotStatus;
  availabilityDate?: Date | undefined;
}

export interface GetAvailabilityRequest {
  userId: number;
  startDate?: Date | undefined;
  endDate?: Date | undefined;
  statuses: AvailabilitySlotStatus[];
  dateTypes: DateType[];
  includeBooked: boolean;
  includePast: boolean;
  pagination?: PaginationRequest | undefined;
}

export interface SearchAvailableUsersRequest {
  date?: Date | undefined;
  startTime: string;
  endTime: string;
  timezone: string;
  location: string;
  maxDistanceKm: number;
  dateTypes: DateType[];
  preferredActivities: string[];
  minAge: number;
  maxAge: number;
  gender: string;
  pagination?: PaginationRequest | undefined;
  page: number;
  limit: number;
}

export interface BookAvailabilityRequest {
  availabilitySlotId: string;
  guestUserId: number;
  activity: string;
  notes: string;
  acceptCancellationPolicy: boolean;
}

export interface UpdateBookingRequest {
  bookingId: string;
  status: AvailabilityBookingStatus;
  notes: string;
  activity: string;
  location: string;
  venue: string;
  virtualLink: string;
}

export interface CancelAvailabilityRequest {
  id: string;
  isBooking: boolean;
  cancellationReason: string;
  notifyAffectedUsers: boolean;
}

export interface UpdateAvailabilityPreferencesRequest {
  isAvailable: boolean;
  preferredDateTypes: DateType[];
  defaultDurationMinutes: number;
  defaultBufferTimeMinutes: number;
  advanceBookingDays: number;
  minimumNoticeHours: number;
  maximumBookingsPerDay: number;
  maximumBookingsPerWeek: number;
  preferredLocations: string[];
  preferredActivities: string[];
  defaultCancellationPolicy: AvailabilityCancellationPolicy;
  autoConfirmBookings: boolean;
  sendReminders: boolean;
  reminderHoursBefore: number;
  blockedUserIds: string[];
}

export interface GetAvailabilityAnalyticsRequest {
  userId: number;
  startDate?: Date | undefined;
  endDate?:
    | Date
    | undefined;
  /** day, week, month */
  groupBy: string;
}

export interface BulkCreateAvailabilityRequest {
  slots: CreateAvailabilityRequest[];
  skipConflicts: boolean;
  allowOverlap: boolean;
  validateOnly: boolean;
}

/** Response messages */
export interface AvailabilityResponse {
  success: boolean;
  data?: AvailabilitySlot | undefined;
  message: string;
}

export interface AvailabilityListResponse {
  success: boolean;
  slots: AvailabilitySlot[];
  pagination?: PaginationResponse | undefined;
  message: string;
  /** Alias for slots for backward compatibility */
  data: AvailabilitySlot[];
}

export interface BookingResponse {
  success: boolean;
  data?: AvailabilityBooking | undefined;
  message: string;
}

export interface BookingListResponse {
  success: boolean;
  bookings: AvailabilityBooking[];
  pagination?: PaginationResponse | undefined;
  message: string;
}

export interface UserAvailabilityPreferencesResponse {
  success: boolean;
  data?: UserAvailabilityPreferences | undefined;
  message: string;
}

export interface AvailabilityAnalyticsResponse {
  success: boolean;
  data?: AvailabilityAnalytics | undefined;
  message: string;
}

export interface AvailabilityAnalytics {
  totalSlotsCreated: number;
  totalBookings: number;
  completedBookings: number;
  cancelledBookings: number;
  bookingRate: number;
  completionRate: number;
  cancellationRate: number;
  averageRating: number;
  trends: AvailabilityTrend[];
  activityStats: ActivityStats[];
  timeSlotStats: TimeSlotStats[];
  totalSlots: number;
  activeSlots: number;
  expiredSlots: number;
  utilizationRate: number;
  dateTypeStats: DateTypeStats[];
  locationStats: LocationStats[];
}

export interface DateTypeStats {
  dateType: DateType;
  count: number;
  percentage: number;
}

export interface LocationStats {
  location: string;
  count: number;
  percentage: number;
}

export interface AvailabilityTrend {
  date: string;
  slotsCreated: number;
  bookings: number;
  cancellations: number;
}

export interface ActivityStats {
  activity: string;
  count: number;
  percentage: number;
}

export interface TimeSlotStats {
  timeSlot: string;
  count: number;
  popularity: number;
}

export interface BulkCreateAvailabilityResponse {
  success: boolean;
  createdSlots: AvailabilitySlot[];
  conflicts: AvailabilityConflict[];
  totalRequested: number;
  totalCreated: number;
  totalConflicts: number;
  message: string;
  /** Alias for created_slots for backward compatibility */
  data: AvailabilitySlot[];
}

export interface AvailabilityConflict {
  requestedSlot?: CreateAvailabilityRequest | undefined;
  conflictReason: string;
  conflictingSlots: AvailabilitySlot[];
  conflictDescription: string;
  conflictingSlotId: string;
}

export interface SearchAvailableUsersResponse {
  success: boolean;
  availableUsers: AvailableUser[];
  pagination?: PaginationResponse | undefined;
  message: string;
  /** Alias for available_users for backward compatibility */
  data: AvailableUser[];
}

export interface AvailableUser {
  userId: number;
  firstName: string;
  profileImageUrl: string;
  age: number;
  location: string;
  distanceKm: number;
  availableSlots: AvailabilitySlot[];
  compatibilityScore: number;
  commonInterests: string[];
}

/** Calendar view response */
export interface CalendarViewResponse {
  success: boolean;
  calendarDays: CalendarDay[];
  message: string;
}

export interface CalendarDay {
  date: string;
  slots: AvailabilitySlot[];
  bookings: AvailabilityBooking[];
  isAvailable: boolean;
  totalSlots: number;
  bookedSlots: number;
}

/** Time suggestions response */
export interface TimeSuggestionsResponse {
  success: boolean;
  suggestions: TimeSuggestion[];
  message: string;
}

export interface TimeSuggestion {
  date: string;
  startTime: string;
  endTime: string;
  score: number;
  reason: string;
  isPeakTime: boolean;
}

/** Slot creation result */
export interface SlotCreationResult {
  success: boolean;
  slot?: AvailabilitySlot | undefined;
  message: string;
  warnings: string[];
}

/** Availability validation rules */
export interface AvailabilityValidationRules {
  minDurationMinutes: number;
  maxDurationMinutes: number;
  minAdvanceBookingHours: number;
  maxAdvanceBookingDays: number;
  maxSlotsPerDay: number;
  maxSlotsPerWeek: number;
  allowedTimeZones: string[];
  allowOverlappingSlots: boolean;
  requireBufferTime: boolean;
  defaultBufferMinutes: number;
}
