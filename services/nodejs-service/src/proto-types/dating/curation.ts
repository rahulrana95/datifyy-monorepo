// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.28.3
// source: dating/curation.proto

/* eslint-disable */
import type { PaginationRequest, PaginationResponse } from "../common/base";
import type {
  CancellationCategory,
  CuratedDateStatus,
  DateMode,
  DateSeriesStatus,
  LocationCoordinates,
  RelationshipStage,
} from "./common";

/** Core curated date message */
export interface CuratedDate {
  id: number;
  user1Id: number;
  user2Id: number;
  /** ISO string */
  dateTime: string;
  durationMinutes: number;
  mode: DateMode;
  /** Location details (for offline dates) */
  locationName: string;
  locationAddress: string;
  locationCoordinates?: LocationCoordinates | undefined;
  locationGoogleMapsUrl: string;
  /** Online meeting details */
  meetingLink: string;
  meetingId: string;
  meetingPassword: string;
  /** Status and tracking */
  status: CuratedDateStatus;
  dateSeriesId: string;
  dateNumberInSeries: number;
  /** Admin instructions */
  adminNotes: string;
  specialInstructions: string;
  dressCode: string;
  suggestedConversationTopics: string[];
  /** Confirmation tracking */
  user1ConfirmedAt: string;
  user2ConfirmedAt: string;
  /** Cancellation details */
  cancelledByUserId: number;
  cancelledAt: string;
  cancellationReason: string;
  cancellationCategory: CancellationCategory;
  /** Completion tracking */
  completedAt: string;
  actualDurationMinutes: number;
  /** Notifications */
  reminderSent24h: boolean;
  reminderSent2h: boolean;
  followUpSent: boolean;
  /** Matching details */
  compatibilityScore: number;
  matchReason: string;
  algorithmConfidence: number;
  /** Token costs */
  tokensCostUser1: number;
  tokensCostUser2: number;
  /** Audit fields */
  curatedBy: number;
  curatedAt: string;
  updatedBy: number;
  updatedAt: string;
}

/** Request messages */
export interface CreateCuratedDateRequest {
  user1Id: number;
  user2Id: number;
  /** ISO string */
  dateTime: string;
  durationMinutes: number;
  mode: DateMode;
  /** Location (for offline dates) */
  locationName: string;
  locationAddress: string;
  locationCoordinates?:
    | LocationCoordinates
    | undefined;
  /** Online meeting (for online dates) */
  meetingLink: string;
  meetingId: string;
  meetingPassword: string;
  /** Admin instructions */
  adminNotes: string;
  specialInstructions: string;
  dressCode: string;
  suggestedConversationTopics: string[];
  /** Matching context */
  compatibilityScore: number;
  matchReason: string;
  algorithmConfidence: number;
  /** Token costs */
  tokensCostUser1: number;
  tokensCostUser2: number;
}

export interface UpdateCuratedDateRequest {
  curatedDateId: number;
  dateTime: string;
  durationMinutes: number;
  mode: DateMode;
  locationName: string;
  locationAddress: string;
  locationCoordinates?: LocationCoordinates | undefined;
  meetingLink: string;
  meetingId: string;
  meetingPassword: string;
  adminNotes: string;
  specialInstructions: string;
  dressCode: string;
  suggestedConversationTopics: string[];
}

export interface GetCuratedDatesRequest {
  statuses: CuratedDateStatus[];
  userId: number;
  startDate: string;
  endDate: string;
  dateSeriesId: string;
  pagination?: PaginationRequest | undefined;
}

export interface GetUserTrustScoreRequest {
  userId: number;
}

export interface CreateDateSeriesRequest {
  user1Id: number;
  user2Id: number;
  relationshipStage: RelationshipStage;
  mutualInterestLevel: number;
  adminNotes: string;
  preferredDateFrequency: string;
  preferredDateTypes: string[];
}

export interface UpdateDateSeriesRequest {
  seriesId: string;
  seriesStatus: DateSeriesStatus;
  relationshipStage: RelationshipStage;
  mutualInterestLevel: number;
  adminNotes: string;
  preferredDateFrequency: string;
  preferredDateTypes: string[];
  seriesEndedReason: string;
  endedByUserId: number;
  finalOutcome: string;
}

/** Response messages */
export interface CuratedDateResponse {
  success: boolean;
  data?: CuratedDate | undefined;
  message: string;
}

export interface CuratedDateListResponse {
  success: boolean;
  curatedDates: CuratedDate[];
  pagination?: PaginationResponse | undefined;
  message: string;
}

/** Additional missing types that the service needs */
export interface SearchPotentialMatchesRequest {
  userId: number;
  preferredInterests: string[];
  minAge: number;
  maxAge: number;
  maxDistanceKm: number;
  location: string;
  limit: number;
  includeCompatibilityAnalysis: boolean;
}

export interface SearchPotentialMatchesResponse {
  success: boolean;
  matches: PotentialMatch[];
  totalMatches: number;
  message: string;
}

export interface PotentialMatch {
  userId: number;
  firstName: string;
  lastName: string;
  age: number;
  location: string;
  interests: string[];
  compatibilityScore: number;
  distanceKm: number;
  profileImageUrl: string;
  isVerified: boolean;
}

export interface UserDatesResponse {
  success: boolean;
  dates: CuratedDate[];
  summary?: UserDatesSummary | undefined;
  message: string;
}

export interface UserDatesSummary {
  totalDates: number;
  upcomingDates: number;
  completedDates: number;
  cancelledDates: number;
  pendingConfirmation: number;
  awaitingFeedback: number;
}

export interface GetDateAnalyticsRequest {
  userId: number;
  startDate: string;
  endDate: string;
  /** daily, weekly, monthly */
  period: string;
  includeUserMetrics: boolean;
  includeVenueMetrics: boolean;
}

export interface DateCurationAnalyticsResponse {
  success: boolean;
  data?: DateCurationAnalytics | undefined;
  message: string;
}

export interface DateCurationAnalytics {
  totalDates: number;
  successfulDates: number;
  cancelledDates: number;
  successRate: number;
  averageRating: number;
  venueStats: VenueAnalytics[];
  userStats: UserAnalytics[];
}

export interface VenueAnalytics {
  venueName: string;
  venueType: string;
  totalBookings: number;
  averageRating: number;
  successRate: number;
}

export interface UserAnalytics {
  userId: number;
  userName: string;
  totalDates: number;
  successfulDates: number;
  successRate: number;
  averageRating: number;
}

export interface DateCurationValidationRules {
  minAdvanceHours: number;
  maxAdvanceDays: number;
  minDurationMinutes: number;
  maxDurationMinutes: number;
  allowedVenues: string[];
  blockedVenues: string[];
  maxDailyBookings: number;
  maxWeeklyBookings: number;
}
