// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.28.3
// source: admin/revenue.proto

/* eslint-disable */
import type { PaginationRequest, PaginationResponse } from "../common/base";

/** Revenue time periods for analytics */
export enum RevenueTimePeriod {
  REVENUE_TIME_PERIOD_UNSPECIFIED = "REVENUE_TIME_PERIOD_UNSPECIFIED",
  REVENUE_TIME_PERIOD_HOURLY = "REVENUE_TIME_PERIOD_HOURLY",
  REVENUE_TIME_PERIOD_DAILY = "REVENUE_TIME_PERIOD_DAILY",
  REVENUE_TIME_PERIOD_WEEKLY = "REVENUE_TIME_PERIOD_WEEKLY",
  REVENUE_TIME_PERIOD_MONTHLY = "REVENUE_TIME_PERIOD_MONTHLY",
  REVENUE_TIME_PERIOD_QUARTERLY = "REVENUE_TIME_PERIOD_QUARTERLY",
  REVENUE_TIME_PERIOD_YEARLY = "REVENUE_TIME_PERIOD_YEARLY",
}

/** Revenue categories for classification */
export enum RevenueCategory {
  REVENUE_CATEGORY_UNSPECIFIED = "REVENUE_CATEGORY_UNSPECIFIED",
  REVENUE_CATEGORY_DATE_BOOKING = "REVENUE_CATEGORY_DATE_BOOKING",
  REVENUE_CATEGORY_ONLINE_DATE = "REVENUE_CATEGORY_ONLINE_DATE",
  REVENUE_CATEGORY_OFFLINE_DATE = "REVENUE_CATEGORY_OFFLINE_DATE",
  REVENUE_CATEGORY_PREMIUM_FEATURE = "REVENUE_CATEGORY_PREMIUM_FEATURE",
  REVENUE_CATEGORY_EVENT_TICKET = "REVENUE_CATEGORY_EVENT_TICKET",
  REVENUE_CATEGORY_SUBSCRIPTION = "REVENUE_CATEGORY_SUBSCRIPTION",
  REVENUE_CATEGORY_GIFT_PURCHASE = "REVENUE_CATEGORY_GIFT_PURCHASE",
  REVENUE_CATEGORY_OTHER = "REVENUE_CATEGORY_OTHER",
}

/** Transaction status for revenue tracking */
export enum TransactionStatus {
  TRANSACTION_STATUS_UNSPECIFIED = "TRANSACTION_STATUS_UNSPECIFIED",
  TRANSACTION_STATUS_PENDING = "TRANSACTION_STATUS_PENDING",
  TRANSACTION_STATUS_COMPLETED = "TRANSACTION_STATUS_COMPLETED",
  TRANSACTION_STATUS_FAILED = "TRANSACTION_STATUS_FAILED",
  TRANSACTION_STATUS_CANCELLED = "TRANSACTION_STATUS_CANCELLED",
  TRANSACTION_STATUS_REFUNDED = "TRANSACTION_STATUS_REFUNDED",
  TRANSACTION_STATUS_PARTIALLY_REFUNDED = "TRANSACTION_STATUS_PARTIALLY_REFUNDED",
  TRANSACTION_STATUS_DISPUTED = "TRANSACTION_STATUS_DISPUTED",
  TRANSACTION_STATUS_UNDER_REVIEW = "TRANSACTION_STATUS_UNDER_REVIEW",
}

/** Payment methods for revenue breakdown */
export enum PaymentMethod {
  PAYMENT_METHOD_UNSPECIFIED = "PAYMENT_METHOD_UNSPECIFIED",
  PAYMENT_METHOD_UPI = "PAYMENT_METHOD_UPI",
  PAYMENT_METHOD_CREDIT_CARD = "PAYMENT_METHOD_CREDIT_CARD",
  PAYMENT_METHOD_DEBIT_CARD = "PAYMENT_METHOD_DEBIT_CARD",
  PAYMENT_METHOD_NET_BANKING = "PAYMENT_METHOD_NET_BANKING",
  PAYMENT_METHOD_WALLET = "PAYMENT_METHOD_WALLET",
  PAYMENT_METHOD_CASH = "PAYMENT_METHOD_CASH",
  PAYMENT_METHOD_OTHER = "PAYMENT_METHOD_OTHER",
}

/** Refund status tracking */
export enum RefundStatus {
  REFUND_STATUS_UNSPECIFIED = "REFUND_STATUS_UNSPECIFIED",
  REFUND_STATUS_NOT_APPLICABLE = "REFUND_STATUS_NOT_APPLICABLE",
  REFUND_STATUS_PENDING = "REFUND_STATUS_PENDING",
  REFUND_STATUS_APPROVED = "REFUND_STATUS_APPROVED",
  REFUND_STATUS_REJECTED = "REFUND_STATUS_REJECTED",
  REFUND_STATUS_PROCESSED = "REFUND_STATUS_PROCESSED",
  REFUND_STATUS_FAILED = "REFUND_STATUS_FAILED",
}

/** Revenue trend directions */
export enum TrendDirection {
  TREND_DIRECTION_UNSPECIFIED = "TREND_DIRECTION_UNSPECIFIED",
  TREND_DIRECTION_UP = "TREND_DIRECTION_UP",
  TREND_DIRECTION_DOWN = "TREND_DIRECTION_DOWN",
  TREND_DIRECTION_STABLE = "TREND_DIRECTION_STABLE",
  TREND_DIRECTION_VOLATILE = "TREND_DIRECTION_VOLATILE",
}

/** Date type for revenue breakdown */
export enum DateType {
  DATE_TYPE_UNSPECIFIED = "DATE_TYPE_UNSPECIFIED",
  DATE_TYPE_ONLINE = "DATE_TYPE_ONLINE",
  DATE_TYPE_OFFLINE = "DATE_TYPE_OFFLINE",
}

/** Statistical significance levels */
export enum SignificanceLevel {
  SIGNIFICANCE_LEVEL_UNSPECIFIED = "SIGNIFICANCE_LEVEL_UNSPECIFIED",
  SIGNIFICANCE_LEVEL_LOW = "SIGNIFICANCE_LEVEL_LOW",
  SIGNIFICANCE_LEVEL_MEDIUM = "SIGNIFICANCE_LEVEL_MEDIUM",
  SIGNIFICANCE_LEVEL_HIGH = "SIGNIFICANCE_LEVEL_HIGH",
}

/** Individual revenue data point */
export interface RevenueDataPoint {
  /** ISO date or period identifier */
  period: string;
  value: number;
  /** Transaction count for this period */
  count: number;
  /** Percentage change from previous period */
  change: number;
  /** For forecast data */
  isProjected: boolean;
}

/** Seasonal pattern data */
export interface SeasonalPattern {
  /** 'spring', 'summer', 'fall', 'winter' */
  season: string;
  /** Compared to average */
  revenueMultiplier: number;
  description: string;
  peakPeriods: string[];
}

/** Revenue summary metrics */
export interface RevenueSummary {
  totalRevenue: number;
  /** After refunds and fees */
  netRevenue: number;
  /** Before any deductions */
  grossRevenue: number;
  totalTransactions: number;
  successfulTransactions: number;
  failedTransactions: number;
  refundedTransactions: number;
  averageTransactionValue: number;
  averageOrderValue: number;
  totalRefunds: number;
  /** Percentage */
  refundRate: number;
  /** Percentage */
  conversionRate: number;
  /** Percentage vs previous period */
  revenueGrowthRate: number;
  /** Percentage vs previous period */
  transactionGrowthRate: number;
}

/** Revenue trends over time */
export interface RevenueTrends {
  revenueByPeriod: RevenueDataPoint[];
  transactionsByPeriod: RevenueDataPoint[];
  averageValueByPeriod: RevenueDataPoint[];
  refundsByPeriod: RevenueDataPoint[];
  conversionByPeriod: RevenueDataPoint[];
  trendDirection: TrendDirection;
  seasonalPatterns: SeasonalPattern[];
}

/** Revenue breakdown by category */
export interface CategoryBreakdown {
  category: RevenueCategory;
  revenue: number;
  transactions: number;
  percentage: number;
  /** Percentage change */
  growth: number;
  averageValue: number;
}

/** Revenue breakdown by location */
export interface LocationBreakdown {
  /** City or country name */
  location: string;
  revenue: number;
  transactions: number;
  /** Unique paying users */
  users: number;
  percentage: number;
  growth: number;
  averageValue: number;
  conversionRate: number;
}

/** Revenue breakdown by payment method */
export interface PaymentMethodBreakdown {
  method: PaymentMethod;
  revenue: number;
  transactions: number;
  percentage: number;
  successRate: number;
  averageValue: number;
  processingFee: number;
}

/** Revenue breakdown by user segment */
export interface UserSegmentBreakdown {
  /** 'new', 'returning', 'premium', etc. */
  segment: string;
  revenue: number;
  users: number;
  transactions: number;
  averageValuePerUser: number;
  lifetimeValue: number;
  retentionRate: number;
}

/** Revenue breakdown by date type */
export interface DateTypeBreakdown {
  dateType: DateType;
  revenue: number;
  bookings: number;
  averageValue: number;
  completionRate: number;
  satisfactionScore: number;
}

/** Revenue breakdown by time periods */
export interface TimeBreakdown {
  /** 0-23 */
  hour: number;
  /** 'monday', 'tuesday', etc. */
  day: string;
  revenue: number;
  transactions: number;
  percentage: number;
}

/** Day of week breakdown */
export interface DayBreakdown {
  /** 'Monday', 'Tuesday', etc. */
  day: string;
  revenue: number;
  transactions: number;
  percentage: number;
  /** Most active hour on this day */
  peakHour: number;
}

/** Revenue breakdowns by various dimensions */
export interface RevenueBreakdowns {
  byCategory: CategoryBreakdown[];
  byCity: LocationBreakdown[];
  byCountry: LocationBreakdown[];
  byPaymentMethod: PaymentMethodBreakdown[];
  byUserSegment: UserSegmentBreakdown[];
  byDateType: DateTypeBreakdown[];
  byTimeOfDay: TimeBreakdown[];
  byDayOfWeek: DayBreakdown[];
}

/** Comparison metrics between periods */
export interface ComparisonMetrics {
  /** Percentage */
  revenueChange: number;
  /** Percentage */
  transactionChange: number;
  /** Percentage */
  averageValueChange: number;
  /** Percentage */
  userCountChange: number;
  trend: TrendDirection;
  /** Statistical significance */
  significance: SignificanceLevel;
}

/** Performance period details */
export interface PerformancePeriod {
  period: string;
  revenue: number;
  transactions: number;
  /** Why it performed well/poorly */
  reason: string;
}

/** Revenue comparisons with previous periods */
export interface RevenueComparisons {
  vsYesterday?: ComparisonMetrics | undefined;
  vsLastWeek?: ComparisonMetrics | undefined;
  vsLastMonth?: ComparisonMetrics | undefined;
  vsLastQuarter?: ComparisonMetrics | undefined;
  vsLastYear?: ComparisonMetrics | undefined;
  bestPerformingPeriod?: PerformancePeriod | undefined;
  worstPerformingPeriod?: PerformancePeriod | undefined;
}

/** Forecast data structure */
export interface ForecastData {
  predictedRevenue: number;
  predictedTransactions: number;
  confidenceIntervalLow: number;
  confidenceIntervalHigh: number;
  dailyBreakdown: RevenueDataPoint[];
  assumptions: string[];
}

/** Revenue forecasting */
export interface RevenueForecast {
  nextWeek?: ForecastData | undefined;
  nextMonth?: ForecastData | undefined;
  nextQuarter?:
    | ForecastData
    | undefined;
  /** 0-100 */
  confidenceLevel: number;
  /** 'trend_analysis', 'ml_model', etc. */
  methodology: string;
  factorsConsidered: string[];
  risks: string[];
  opportunities: string[];
}

/** Revenue alert types */
export interface RevenueAlert {
  id: string;
  /** 'drop', 'spike', 'threshold', 'anomaly' */
  type: string;
  /** 'low', 'medium', 'high', 'critical' */
  severity: string;
  title: string;
  description: string;
  impact: string;
  recommendedActions: string[];
  createdAt: string;
  isResolved: boolean;
  resolvedAt: string;
}

/** Transaction details for revenue tracking */
export interface TransactionDetails {
  id: string;
  userId: string;
  category: RevenueCategory;
  paymentMethod: PaymentMethod;
  status: TransactionStatus;
  refundStatus: RefundStatus;
  amount: number;
  fee: number;
  netAmount: number;
  currency: string;
  description: string;
  referenceId: string;
  gatewayTransactionId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string;
  failedAt: string;
  refundedAt: string;
  failureReason: string;
  refundReason: string;
  refundAmount: number;
  metadata: { [key: string]: string };
}

export interface TransactionDetails_MetadataEntry {
  key: string;
  value: string;
}

/** Main revenue analytics overview */
export interface RevenueAnalyticsOverview {
  summary?: RevenueSummary | undefined;
  trends?: RevenueTrends | undefined;
  breakdowns?: RevenueBreakdowns | undefined;
  comparisons?: RevenueComparisons | undefined;
  forecasts?: RevenueForecast | undefined;
  alerts: RevenueAlert[];
  lastUpdated: string;
}

/** Request messages */
export interface GetRevenueAnalyticsRequest {
  period: RevenueTimePeriod;
  startDate: string;
  endDate: string;
  categories: RevenueCategory[];
  locations: string[];
  paymentMethods: PaymentMethod[];
  includeTrends: boolean;
  includeBreakdowns: boolean;
  includeComparisons: boolean;
  includeForecasts: boolean;
  includeAlerts: boolean;
}

export interface GetTransactionDetailsRequest {
  statuses: TransactionStatus[];
  categories: RevenueCategory[];
  paymentMethods: PaymentMethod[];
  startDate: string;
  endDate: string;
  userId: string;
  minAmount: number;
  maxAmount: number;
  pagination?: PaginationRequest | undefined;
}

export interface GetRevenueBreakdownRequest {
  period: RevenueTimePeriod;
  startDate: string;
  endDate: string;
  /** 'category', 'location', 'payment_method', etc. */
  breakdownType: string;
  filters: string[];
  limit: number;
}

export interface GetRevenueForecastRequest {
  period: RevenueTimePeriod;
  periodsAhead: number;
  /** 'trend_analysis', 'ml_model', etc. */
  methodology: string;
  factorsToConsider: string[];
  confidenceLevel: number;
}

export interface GetRevenueAlertsRequest {
  alertTypes: string[];
  severityLevels: string[];
  includeResolved: boolean;
  startDate: string;
  endDate: string;
  pagination?: PaginationRequest | undefined;
}

export interface CreateRevenueAlertRequest {
  type: string;
  severity: string;
  title: string;
  description: string;
  impact: string;
  recommendedActions: string[];
  metadata: { [key: string]: string };
}

export interface CreateRevenueAlertRequest_MetadataEntry {
  key: string;
  value: string;
}

export interface UpdateRevenueAlertRequest {
  alertId: string;
  isResolved: boolean;
  resolutionNotes: string;
  actionsTaken: string[];
}

export interface GetRevenueComparisonsRequest {
  period: RevenueTimePeriod;
  targetDate: string;
  /** 'yesterday', 'last_week', etc. */
  comparisonPeriods: string[];
  categories: RevenueCategory[];
  locations: string[];
}

/** Response messages */
export interface RevenueAnalyticsResponse {
  success: boolean;
  data?: RevenueAnalyticsOverview | undefined;
  message: string;
}

export interface TransactionDetailsResponse {
  success: boolean;
  transactions: TransactionDetails[];
  pagination?: PaginationResponse | undefined;
  message: string;
}

export interface RevenueBreakdownResponse {
  success: boolean;
  data?: RevenueBreakdowns | undefined;
  message: string;
}

export interface RevenueForecastResponse {
  success: boolean;
  data?: RevenueForecast | undefined;
  message: string;
}

export interface RevenueAlertsResponse {
  success: boolean;
  alerts: RevenueAlert[];
  pagination?: PaginationResponse | undefined;
  message: string;
}

export interface RevenueComparisonsResponse {
  success: boolean;
  data?: RevenueComparisons | undefined;
  message: string;
}
