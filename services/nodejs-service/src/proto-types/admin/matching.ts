// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.28.3
// source: admin/matching.proto

/* eslint-disable */
import type { PaginationRequest, PaginationResponse } from "../common/base";
import type { AgeRange } from "../user/profile";
import type { DateType } from "./revenue";

/** Match suggestion algorithms */
export enum MatchAlgorithm {
  MATCH_ALGORITHM_UNSPECIFIED = "MATCH_ALGORITHM_UNSPECIFIED",
  MATCH_ALGORITHM_PREFERENCE_BASED = "MATCH_ALGORITHM_PREFERENCE_BASED",
  MATCH_ALGORITHM_BEHAVIOR_BASED = "MATCH_ALGORITHM_BEHAVIOR_BASED",
  MATCH_ALGORITHM_COLLABORATIVE_FILTERING = "MATCH_ALGORITHM_COLLABORATIVE_FILTERING",
  MATCH_ALGORITHM_HYBRID_ML = "MATCH_ALGORITHM_HYBRID_ML",
  MATCH_ALGORITHM_LOCATION_PROXIMITY = "MATCH_ALGORITHM_LOCATION_PROXIMITY",
  MATCH_ALGORITHM_ACTIVITY_BASED = "MATCH_ALGORITHM_ACTIVITY_BASED",
  MATCH_ALGORITHM_TRUST_SCORE_WEIGHTED = "MATCH_ALGORITHM_TRUST_SCORE_WEIGHTED",
}

/** Compatibility factors for scoring */
export enum CompatibilityFactor {
  COMPATIBILITY_FACTOR_UNSPECIFIED = "COMPATIBILITY_FACTOR_UNSPECIFIED",
  COMPATIBILITY_FACTOR_AGE_COMPATIBILITY = "COMPATIBILITY_FACTOR_AGE_COMPATIBILITY",
  COMPATIBILITY_FACTOR_LOCATION_PROXIMITY = "COMPATIBILITY_FACTOR_LOCATION_PROXIMITY",
  COMPATIBILITY_FACTOR_EDUCATION_LEVEL = "COMPATIBILITY_FACTOR_EDUCATION_LEVEL",
  COMPATIBILITY_FACTOR_CAREER_COMPATIBILITY = "COMPATIBILITY_FACTOR_CAREER_COMPATIBILITY",
  COMPATIBILITY_FACTOR_LIFESTYLE_ALIGNMENT = "COMPATIBILITY_FACTOR_LIFESTYLE_ALIGNMENT",
  COMPATIBILITY_FACTOR_INTERESTS_OVERLAP = "COMPATIBILITY_FACTOR_INTERESTS_OVERLAP",
  COMPATIBILITY_FACTOR_VALUES_ALIGNMENT = "COMPATIBILITY_FACTOR_VALUES_ALIGNMENT",
  COMPATIBILITY_FACTOR_COMMUNICATION_STYLE = "COMPATIBILITY_FACTOR_COMMUNICATION_STYLE",
  COMPATIBILITY_FACTOR_RELATIONSHIP_GOALS = "COMPATIBILITY_FACTOR_RELATIONSHIP_GOALS",
  COMPATIBILITY_FACTOR_PHYSICAL_PREFERENCES = "COMPATIBILITY_FACTOR_PHYSICAL_PREFERENCES",
  COMPATIBILITY_FACTOR_RELIGIOUS_COMPATIBILITY = "COMPATIBILITY_FACTOR_RELIGIOUS_COMPATIBILITY",
  COMPATIBILITY_FACTOR_FAMILY_PLANNING = "COMPATIBILITY_FACTOR_FAMILY_PLANNING",
  COMPATIBILITY_FACTOR_SOCIAL_HABITS = "COMPATIBILITY_FACTOR_SOCIAL_HABITS",
  COMPATIBILITY_FACTOR_ACTIVITY_PREFERENCES = "COMPATIBILITY_FACTOR_ACTIVITY_PREFERENCES",
  COMPATIBILITY_FACTOR_PERSONALITY_MATCH = "COMPATIBILITY_FACTOR_PERSONALITY_MATCH",
}

/** Match suggestion status */
export enum MatchSuggestionStatus {
  MATCH_SUGGESTION_STATUS_UNSPECIFIED = "MATCH_SUGGESTION_STATUS_UNSPECIFIED",
  MATCH_SUGGESTION_STATUS_PENDING = "MATCH_SUGGESTION_STATUS_PENDING",
  MATCH_SUGGESTION_STATUS_REVIEWED = "MATCH_SUGGESTION_STATUS_REVIEWED",
  MATCH_SUGGESTION_STATUS_ACCEPTED = "MATCH_SUGGESTION_STATUS_ACCEPTED",
  MATCH_SUGGESTION_STATUS_REJECTED = "MATCH_SUGGESTION_STATUS_REJECTED",
  MATCH_SUGGESTION_STATUS_DATE_CREATED = "MATCH_SUGGESTION_STATUS_DATE_CREATED",
  MATCH_SUGGESTION_STATUS_EXPIRED = "MATCH_SUGGESTION_STATUS_EXPIRED",
  MATCH_SUGGESTION_STATUS_CANCELLED = "MATCH_SUGGESTION_STATUS_CANCELLED",
}

/** User availability status for matching */
export enum UserAvailabilityStatus {
  USER_AVAILABILITY_STATUS_UNSPECIFIED = "USER_AVAILABILITY_STATUS_UNSPECIFIED",
  USER_AVAILABILITY_STATUS_AVAILABLE = "USER_AVAILABILITY_STATUS_AVAILABLE",
  USER_AVAILABILITY_STATUS_BUSY = "USER_AVAILABILITY_STATUS_BUSY",
  USER_AVAILABILITY_STATUS_ON_DATE = "USER_AVAILABILITY_STATUS_ON_DATE",
  USER_AVAILABILITY_STATUS_UNAVAILABLE = "USER_AVAILABILITY_STATUS_UNAVAILABLE",
  USER_AVAILABILITY_STATUS_PROBATION = "USER_AVAILABILITY_STATUS_PROBATION",
  USER_AVAILABILITY_STATUS_INACTIVE = "USER_AVAILABILITY_STATUS_INACTIVE",
}

/** Match confidence levels */
export enum MatchConfidenceLevel {
  MATCH_CONFIDENCE_LEVEL_UNSPECIFIED = "MATCH_CONFIDENCE_LEVEL_UNSPECIFIED",
  /** MATCH_CONFIDENCE_LEVEL_VERY_LOW - < 30% */
  MATCH_CONFIDENCE_LEVEL_VERY_LOW = "MATCH_CONFIDENCE_LEVEL_VERY_LOW",
  /** MATCH_CONFIDENCE_LEVEL_LOW - 30-50% */
  MATCH_CONFIDENCE_LEVEL_LOW = "MATCH_CONFIDENCE_LEVEL_LOW",
  /** MATCH_CONFIDENCE_LEVEL_MEDIUM - 50-70% */
  MATCH_CONFIDENCE_LEVEL_MEDIUM = "MATCH_CONFIDENCE_LEVEL_MEDIUM",
  /** MATCH_CONFIDENCE_LEVEL_HIGH - 70-85% */
  MATCH_CONFIDENCE_LEVEL_HIGH = "MATCH_CONFIDENCE_LEVEL_HIGH",
  /** MATCH_CONFIDENCE_LEVEL_VERY_HIGH - 85-95% */
  MATCH_CONFIDENCE_LEVEL_VERY_HIGH = "MATCH_CONFIDENCE_LEVEL_VERY_HIGH",
  /** MATCH_CONFIDENCE_LEVEL_EXCEPTIONAL - > 95% */
  MATCH_CONFIDENCE_LEVEL_EXCEPTIONAL = "MATCH_CONFIDENCE_LEVEL_EXCEPTIONAL",
}

/** Date success prediction categories */
export enum DateSuccessPrediction {
  DATE_SUCCESS_PREDICTION_UNSPECIFIED = "DATE_SUCCESS_PREDICTION_UNSPECIFIED",
  /** DATE_SUCCESS_PREDICTION_UNLIKELY - < 25% */
  DATE_SUCCESS_PREDICTION_UNLIKELY = "DATE_SUCCESS_PREDICTION_UNLIKELY",
  /** DATE_SUCCESS_PREDICTION_POSSIBLE - 25-50% */
  DATE_SUCCESS_PREDICTION_POSSIBLE = "DATE_SUCCESS_PREDICTION_POSSIBLE",
  /** DATE_SUCCESS_PREDICTION_LIKELY - 50-75% */
  DATE_SUCCESS_PREDICTION_LIKELY = "DATE_SUCCESS_PREDICTION_LIKELY",
  /** DATE_SUCCESS_PREDICTION_VERY_LIKELY - 75-90% */
  DATE_SUCCESS_PREDICTION_VERY_LIKELY = "DATE_SUCCESS_PREDICTION_VERY_LIKELY",
  /** DATE_SUCCESS_PREDICTION_ALMOST_CERTAIN - > 90% */
  DATE_SUCCESS_PREDICTION_ALMOST_CERTAIN = "DATE_SUCCESS_PREDICTION_ALMOST_CERTAIN",
}

/** Match rejection reasons for learning */
export enum MatchRejectionReason {
  MATCH_REJECTION_REASON_UNSPECIFIED = "MATCH_REJECTION_REASON_UNSPECIFIED",
  MATCH_REJECTION_REASON_COMPATIBILITY_TOO_LOW = "MATCH_REJECTION_REASON_COMPATIBILITY_TOO_LOW",
  MATCH_REJECTION_REASON_LOCATION_TOO_FAR = "MATCH_REJECTION_REASON_LOCATION_TOO_FAR",
  MATCH_REJECTION_REASON_AGE_MISMATCH = "MATCH_REJECTION_REASON_AGE_MISMATCH",
  MATCH_REJECTION_REASON_LIFESTYLE_CONFLICT = "MATCH_REJECTION_REASON_LIFESTYLE_CONFLICT",
  MATCH_REJECTION_REASON_RECENT_INTERACTION = "MATCH_REJECTION_REASON_RECENT_INTERACTION",
  MATCH_REJECTION_REASON_USER_PREFERENCE_MISMATCH = "MATCH_REJECTION_REASON_USER_PREFERENCE_MISMATCH",
  MATCH_REJECTION_REASON_TRUST_SCORE_LOW = "MATCH_REJECTION_REASON_TRUST_SCORE_LOW",
  MATCH_REJECTION_REASON_ADMIN_INTUITION = "MATCH_REJECTION_REASON_ADMIN_INTUITION",
  MATCH_REJECTION_REASON_SCHEDULING_CONFLICT = "MATCH_REJECTION_REASON_SCHEDULING_CONFLICT",
  MATCH_REJECTION_REASON_OTHER = "MATCH_REJECTION_REASON_OTHER",
}

/** Risk factor severity levels */
export enum RiskSeverity {
  RISK_SEVERITY_UNSPECIFIED = "RISK_SEVERITY_UNSPECIFIED",
  RISK_SEVERITY_LOW = "RISK_SEVERITY_LOW",
  RISK_SEVERITY_MEDIUM = "RISK_SEVERITY_MEDIUM",
  RISK_SEVERITY_HIGH = "RISK_SEVERITY_HIGH",
  RISK_SEVERITY_CRITICAL = "RISK_SEVERITY_CRITICAL",
}

/** Impact levels for compatibility factors */
export enum ImpactLevel {
  IMPACT_LEVEL_UNSPECIFIED = "IMPACT_LEVEL_UNSPECIFIED",
  IMPACT_LEVEL_LOW = "IMPACT_LEVEL_LOW",
  IMPACT_LEVEL_MEDIUM = "IMPACT_LEVEL_MEDIUM",
  IMPACT_LEVEL_HIGH = "IMPACT_LEVEL_HIGH",
}

/** User engagement levels */
export enum UserEngagementLevel {
  USER_ENGAGEMENT_LEVEL_UNSPECIFIED = "USER_ENGAGEMENT_LEVEL_UNSPECIFIED",
  USER_ENGAGEMENT_LEVEL_LOW = "USER_ENGAGEMENT_LEVEL_LOW",
  USER_ENGAGEMENT_LEVEL_MEDIUM = "USER_ENGAGEMENT_LEVEL_MEDIUM",
  USER_ENGAGEMENT_LEVEL_HIGH = "USER_ENGAGEMENT_LEVEL_HIGH",
}

/** User verification levels */
export enum UserVerificationLevel {
  USER_VERIFICATION_LEVEL_UNSPECIFIED = "USER_VERIFICATION_LEVEL_UNSPECIFIED",
  USER_VERIFICATION_LEVEL_BASIC = "USER_VERIFICATION_LEVEL_BASIC",
  USER_VERIFICATION_LEVEL_VERIFIED = "USER_VERIFICATION_LEVEL_VERIFIED",
  USER_VERIFICATION_LEVEL_PREMIUM = "USER_VERIFICATION_LEVEL_PREMIUM",
}

/** Match usage outcome */
export enum MatchUsageOutcome {
  MATCH_USAGE_OUTCOME_UNSPECIFIED = "MATCH_USAGE_OUTCOME_UNSPECIFIED",
  MATCH_USAGE_OUTCOME_SCHEDULED = "MATCH_USAGE_OUTCOME_SCHEDULED",
  MATCH_USAGE_OUTCOME_ACCEPTED = "MATCH_USAGE_OUTCOME_ACCEPTED",
  MATCH_USAGE_OUTCOME_DECLINED = "MATCH_USAGE_OUTCOME_DECLINED",
  MATCH_USAGE_OUTCOME_CANCELLED = "MATCH_USAGE_OUTCOME_CANCELLED",
}

/** Location coordinates */
export interface LocationCoordinates {
  lat: number;
  lng: number;
}

/** User location details */
export interface UserLocation {
  city: string;
  state: string;
  country: string;
  coordinates?: LocationCoordinates | undefined;
  timezone: string;
}

/** User lifestyle information */
export interface UserLifestyle {
  drinking: string;
  smoking: string;
  exercise: string;
  diet: string;
  socialLevel: string;
  workLifeBalance: string;
  travelFrequency: string;
  petOwner: boolean;
  livingArrangement: string;
}

/** User preferences summary */
export interface UserPreferences {
  ageRange?:
    | AgeRange
    | undefined;
  /** km */
  locationRadius: number;
  education: string[];
  lifestyle: { [key: string]: string };
  interests: string[];
  dealBreakers: string[];
  priorities: string[];
}

export interface UserPreferences_LifestyleEntry {
  key: string;
  value: string;
}

/** User verification status */
export interface UserVerificationStatus {
  email: boolean;
  phone: boolean;
  identity: boolean;
  photos: boolean;
  workplace: boolean;
  overallLevel: UserVerificationLevel;
}

/** User activity level */
export interface UserActivityLevel {
  /** 'daily', 'weekly', etc. */
  loginFrequency: string;
  /** 0-1 */
  responseRate: number;
  /** 0-1 */
  initiationRate: number;
  /** 0-1 */
  completionRate: number;
  /** 0-1 */
  feedbackRate: number;
  overallEngagement: UserEngagementLevel;
}

/** User dating history summary */
export interface UserDateHistory {
  totalDates: number;
  completedDates: number;
  cancelledDates: number;
  noShows: number;
  averageRating: number;
  /** 0-1 */
  secondDateRate: number;
  lastDateAt: string;
  favoriteActivities: string[];
  preferredLocations: string[];
  timePreferences: string[];
}

/** User profile for matching */
export interface MatchUserProfile {
  id: number;
  email: string;
  firstName: string;
  lastName: string;
  age: number;
  gender: string;
  location?: UserLocation | undefined;
  education: string;
  profession: string;
  bio: string;
  interests: string[];
  lifestyle?: UserLifestyle | undefined;
  preferences?: UserPreferences | undefined;
  verificationStatus?: UserVerificationStatus | undefined;
  trustScore: number;
  activityLevel?: UserActivityLevel | undefined;
  availabilityStatus: UserAvailabilityStatus;
  lastActiveAt: string;
  dateHistory?: UserDateHistory | undefined;
  photos: string[];
  isProfileComplete: boolean;
}

/** Admin user profile for match requests */
export interface AdminUserProfile {
  id: number;
  email: string;
  firstName: string;
  lastName: string;
  role: string;
  experience: string;
  specialization: string[];
  /** 0-1 */
  successRate: number;
  totalMatches: number;
}

/** Individual compatibility factor score */
export interface FactorScore {
  /** 0-100 */
  score: number;
  /** 0-1, importance weight */
  weight: number;
  explanation: string;
  dataPoints: string[];
  /** 0-1 */
  confidence: number;
}

/** Compatibility strength or concern area */
export interface CompatibilityStrength {
  factor: CompatibilityFactor;
  score: number;
  impact: ImpactLevel;
  description: string;
  examples: string[];
}

/** Risk factor analysis */
export interface RiskFactor {
  type: string;
  severity: RiskSeverity;
  description: string;
  /** 0-1 */
  likelihood: number;
  mitigation: string;
  impact: string;
}

/** Comprehensive compatibility analysis */
export interface CompatibilityAnalysis {
  /** 0-100 */
  overallScore: number;
  factorScores: { [key: string]: FactorScore };
  strengthAreas: CompatibilityStrength[];
  concernAreas: CompatibilityStrength[];
  improvementSuggestions: string[];
  dealBreakers: string[];
  positiveIndicators: string[];
  riskFactors: RiskFactor[];
  /** 0-100 */
  longTermCompatibility: number;
  /** 0-100 */
  chemistryPrediction: number;
  /** 0-100 */
  communicationFit: number;
}

export interface CompatibilityAnalysis_FactorScoresEntry {
  key: string;
  value?: FactorScore | undefined;
}

/** Match usage details when suggestion is used */
export interface MatchUsageDetails {
  dateCreated: boolean;
  dateId: number;
  dateScheduledAt: string;
  usedAt: string;
  adminNotes: string;
  modifications: string[];
  outcome: MatchUsageOutcome;
}

/** Main match suggestion message */
export interface MatchSuggestion {
  id: string;
  requestingAdminId: number;
  targetUserId: number;
  suggestedUserId: number;
  algorithm: MatchAlgorithm;
  /** 0-100 */
  compatibilityScore: number;
  confidenceLevel: MatchConfidenceLevel;
  matchReason: string;
  detailedAnalysis?: CompatibilityAnalysis | undefined;
  successPrediction: DateSuccessPrediction;
  /** 0-1 */
  successProbability: number;
  /** 0-100 */
  estimatedChemistry: number;
  recommendedDateType: DateType;
  recommendedLocation: string;
  recommendedActivities: string[];
  conversationStarters: string[];
  potentialConcerns: string[];
  status: MatchSuggestionStatus;
  adminNotes: string;
  rejectionReason: MatchRejectionReason;
  rejectionNotes: string;
  generatedAt: string;
  expiresAt: string;
  reviewedAt: string;
  reviewedBy: number;
  isUsed: boolean;
  usageDetails?: MatchUsageDetails | undefined;
  targetUser?: MatchUserProfile | undefined;
  suggestedUser?: MatchUserProfile | undefined;
  requestingAdmin?: AdminUserProfile | undefined;
}

/** Batch match suggestion request */
export interface BatchMatchSuggestion {
  batchId: string;
  targetUserIds: number[];
  algorithms: MatchAlgorithm[];
  maxSuggestionsPerUser: number;
  minCompatibilityScore: number;
  priorityFactors: CompatibilityFactor[];
  includeAnalysis: boolean;
  requestedBy: string;
  requestedAt: string;
  expiresAt: string;
}

/** Request messages */
export interface GenerateMatchSuggestionRequest {
  targetUserId: number;
  algorithms: MatchAlgorithm[];
  maxSuggestions: number;
  minCompatibilityScore: number;
  priorityFactors: CompatibilityFactor[];
  includeDetailedAnalysis: boolean;
  excludeUserIds: number[];
}

export interface GetMatchSuggestionsRequest {
  adminId: number;
  targetUserIds: number[];
  statuses: MatchSuggestionStatus[];
  algorithms: MatchAlgorithm[];
  minCompatibilityScore: number;
  startDate: string;
  endDate: string;
  pagination?: PaginationRequest | undefined;
}

export interface ReviewMatchSuggestionRequest {
  suggestionId: string;
  adminId: number;
  status: MatchSuggestionStatus;
  adminNotes: string;
  rejectionReason: MatchRejectionReason;
  rejectionNotes: string;
}

export interface UseMatchSuggestionRequest {
  suggestionId: string;
  adminId: number;
  dateId: number;
  dateScheduledAt: string;
  adminNotes: string;
  modifications: string[];
}

export interface GetCompatibilityAnalysisRequest {
  user1Id: number;
  user2Id: number;
  factors: CompatibilityFactor[];
  includeDetailedBreakdown: boolean;
  includeRiskAnalysis: boolean;
}

export interface BatchGenerateMatchSuggestionsRequest {
  targetUserIds: number[];
  algorithms: MatchAlgorithm[];
  maxSuggestionsPerUser: number;
  minCompatibilityScore: number;
  priorityFactors: CompatibilityFactor[];
  includeAnalysis: boolean;
  requestingAdminId: number;
}

export interface GetUserMatchabilityRequest {
  userId: number;
  includeCompatibilityFactors: boolean;
  includeActivityAnalysis: boolean;
  includePreferenceAnalysis: boolean;
}

/** Response messages */
export interface MatchSuggestionResponse {
  success: boolean;
  data?: MatchSuggestion | undefined;
  message: string;
}

export interface MatchSuggestionListResponse {
  success: boolean;
  suggestions: MatchSuggestion[];
  pagination?: PaginationResponse | undefined;
  message: string;
}

export interface CompatibilityAnalysisResponse {
  success: boolean;
  data?: CompatibilityAnalysis | undefined;
  message: string;
}

export interface BatchMatchSuggestionResponse {
  success: boolean;
  batchId: string;
  totalGenerated: number;
  totalUsersProcessed: number;
  suggestions: MatchSuggestion[];
  message: string;
}

export interface UserMatchabilityResponse {
  success: boolean;
  userProfile?: MatchUserProfile | undefined;
  strongFactors: CompatibilityFactor[];
  weakFactors: CompatibilityFactor[];
  improvementSuggestions: string[];
  overallMatchabilityScore: number;
  message: string;
}

export interface ActionResponse {
  success: boolean;
  message: string;
}
