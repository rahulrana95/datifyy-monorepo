// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.28.3
// source: admin/auth.proto

/* eslint-disable */
import type { PaginationResponse } from "../common/base";
import type { AlertSeverityLevel } from "./dashboard";
import type {
  AdminAccountStatus,
  AdminActionType,
  AdminLoginAttemptResult,
  AdminPermission,
  AdminPermissionLevel,
  AdminRiskLevel,
  AdminSessionStatus,
  AdminTwoFactorMethod,
} from "./enums";

/** Admin user */
export interface AdminUser {
  id: number;
  email: string;
  firstName: string;
  lastName: string;
  permissionLevel: AdminPermissionLevel;
  additionalPermissions: AdminPermission[];
  accountStatus: AdminAccountStatus;
  isActive: boolean;
  profileImageUrl: string;
  phoneNumber: string;
  department: string;
  position: string;
  timezone: string;
  preferredLanguage: string;
  twoFactorEnabled: boolean;
  twoFactorMethods: AdminTwoFactorMethod[];
  failedLoginAttempts: number;
  lockedAt?: string | undefined;
  lockExpiresAt?: string | undefined;
  lastLoginAt?: string | undefined;
  lastLoginIp: string;
  lastLoginUserAgent: string;
  lastActiveAt?: string | undefined;
  loginCount: number;
  lastPasswordChange?: string | undefined;
  passwordExpiryDate?: string | undefined;
  mustChangePassword: boolean;
  createdBy: number;
  updatedBy: number;
  notes: string;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

/** Admin profile (public view) */
export interface AdminProfile {
  id: number;
  email: string;
  firstName: string;
  lastName: string;
  fullName: string;
  permissionLevel: AdminPermissionLevel;
  permissions: AdminPermission[];
  accountStatus: AdminAccountStatus;
  isActive: boolean;
  profileImageUrl: string;
  department: string;
  position: string;
  timezone: string;
  preferredLanguage: string;
  twoFactorEnabled: boolean;
  lastActiveAt?: string | undefined;
  createdAt?: string | undefined;
}

/** Device info */
export interface DeviceInfo {
  userAgent: string;
  platform: string;
  browser: string;
  version: string;
  os: string;
  device: string;
}

/** Geo location */
export interface GeoLocation {
  ip: string;
  country: string;
  region: string;
  city: string;
  timezone: string;
  latitude: number;
  longitude: number;
}

/** Admin session */
export interface AdminSession {
  id: string;
  adminId: number;
  accessToken: string;
  refreshToken: string;
  status: AdminSessionStatus;
  device?: DeviceInfo | undefined;
  location?: GeoLocation | undefined;
  ipAddress: string;
  createdAt?: string | undefined;
  expiresAt?: string | undefined;
  lastActivityAt?: string | undefined;
  isTwoFactorComplete: boolean;
  twoFactorMethod: string;
}

/** Admin auth context */
export interface AdminAuthContext {
  admin?: AdminProfile | undefined;
  sessionId: string;
  permissions: AdminPermission[];
  hasPermission: boolean;
  sessionExpiresAt?: string | undefined;
  requiresTwoFactor: boolean;
}

/** Admin audit log */
export interface AdminAuditLog {
  id: string;
  adminId: number;
  action: AdminActionType;
  resourceType: string;
  resourceId: string;
  description: string;
  metadata: { [key: string]: string };
  ipAddress: string;
  userAgent: string;
  riskLevel: AdminRiskLevel;
  success: boolean;
  errorMessage: string;
  createdAt?: string | undefined;
}

export interface AdminAuditLog_MetadataEntry {
  key: string;
  value: string;
}

/** Admin login attempt */
export interface AdminLoginAttempt {
  id: string;
  email: string;
  adminId: number;
  result: AdminLoginAttemptResult;
  ipAddress: string;
  userAgent: string;
  location?: GeoLocation | undefined;
  isSuspicious: boolean;
  suspiciousReason: string;
  attemptedAt?: string | undefined;
}

/** Admin security alert */
export interface AdminSecurityAlert {
  id: string;
  adminId: number;
  /** suspicious_login, password_reset, permission_change, etc. */
  alertType: string;
  severity: AlertSeverityLevel;
  title: string;
  description: string;
  details: { [key: string]: string };
  isResolved: boolean;
  resolvedBy: string;
  resolvedAt?: string | undefined;
  createdAt?: string | undefined;
}

export interface AdminSecurityAlert_DetailsEntry {
  key: string;
  value: string;
}

/** Request messages */
export interface AdminLoginRequest {
  email: string;
  password: string;
  rememberMe: boolean;
  device?: DeviceInfo | undefined;
}

export interface AdminTwoFactorRequest {
  sessionId: string;
  code: string;
  method: AdminTwoFactorMethod;
  trustDevice: boolean;
}

export interface AdminRefreshTokenRequest {
  refreshToken: string;
}

export interface AdminLogoutRequest {
  sessionId: string;
  logoutAllDevices: boolean;
}

export interface AdminPasswordResetRequest {
  email: string;
  resetCode: string;
  newPassword: string;
}

export interface AdminPasswordChangeRequest {
  currentPassword: string;
  newPassword: string;
  logoutOtherSessions: boolean;
}

export interface AdminPermissionCheckRequest {
  adminId: number;
  requiredPermissions: AdminPermission[];
  requiredLevel: AdminPermissionLevel;
  resourceType: string;
  resourceId: string;
}

export interface AdminListFilters {
  statuses: AdminAccountStatus[];
  permissionLevels: AdminPermissionLevel[];
  departments: string[];
  activeOnly: boolean;
  twoFactorEnabledOnly: boolean;
  searchQuery: string;
  createdAfter?: string | undefined;
  createdBefore?: string | undefined;
  lastActiveAfter?: string | undefined;
  lastActiveBefore?: string | undefined;
}

export interface AdminCreateRequest {
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  permissionLevel: AdminPermissionLevel;
  additionalPermissions: AdminPermission[];
  department: string;
  position: string;
  phoneNumber: string;
  timezone: string;
  preferredLanguage: string;
  requirePasswordChange: boolean;
  sendWelcomeEmail: boolean;
  notes: string;
}

export interface AdminUpdateRequest {
  adminId: number;
  firstName: string;
  lastName: string;
  permissionLevel: AdminPermissionLevel;
  additionalPermissions: AdminPermission[];
  accountStatus: AdminAccountStatus;
  isActive: boolean;
  department: string;
  position: string;
  phoneNumber: string;
  timezone: string;
  preferredLanguage: string;
  notes: string;
}

/** Response messages */
export interface AdminLoginResponse {
  success: boolean;
  authContext?: AdminAuthContext | undefined;
  accessToken: string;
  refreshToken: string;
  sessionId: string;
  requiresTwoFactor: boolean;
  availableMethods: AdminTwoFactorMethod[];
  message: string;
}

export interface AdminRefreshTokenResponse {
  success: boolean;
  accessToken: string;
  refreshToken: string;
  authContext?: AdminAuthContext | undefined;
  message: string;
}

export interface AdminLogoutResponse {
  success: boolean;
  sessionsTerminated: number;
  message: string;
}

export interface AdminPermissionCheckResponse {
  hasPermission: boolean;
  missingPermissions: AdminPermission[];
  reason: string;
}

export interface AdminListResponse {
  success: boolean;
  admins: AdminProfile[];
  pagination?: PaginationResponse | undefined;
  summary?: AdminListSummary | undefined;
  message: string;
}

export interface AdminListSummary {
  totalCount: number;
  activeCount: number;
  suspendedCount: number;
  lockedCount: number;
  byPermissionLevel: { [key: string]: number };
  byDepartment: { [key: string]: number };
}

export interface AdminListSummary_ByPermissionLevelEntry {
  key: string;
  value: number;
}

export interface AdminListSummary_ByDepartmentEntry {
  key: string;
  value: number;
}

export interface AdminActivitySummary {
  adminId: number;
  totalActions: number;
  lastActivityAt?: string | undefined;
  recentActions: AdminActionSummary[];
  actionsByType: { [key: string]: number };
  suspiciousActivities: number;
}

export interface AdminActivitySummary_ActionsByTypeEntry {
  key: string;
  value: number;
}

export interface AdminActionSummary {
  action: AdminActionType;
  description: string;
  timestamp?: string | undefined;
  success: boolean;
}

export interface AdminApiResponse {
  success: boolean;
  message: string;
  errors: { [key: string]: string };
  requestId: string;
  timestamp?: string | undefined;
}

export interface AdminApiResponse_ErrorsEntry {
  key: string;
  value: string;
}
