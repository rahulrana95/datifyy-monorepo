// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.28.3
// source: dating/common.proto

/* eslint-disable */
import type { PaginationResponse } from "../common/base";

/** Date mode types - shared across dating services */
export enum DateMode {
  DATE_MODE_UNSPECIFIED = "DATE_MODE_UNSPECIFIED",
  DATE_MODE_ONLINE = "DATE_MODE_ONLINE",
  DATE_MODE_OFFLINE = "DATE_MODE_OFFLINE",
}

/** Curated date status types - unified status system */
export enum CuratedDateStatus {
  CURATED_DATE_STATUS_UNSPECIFIED = "CURATED_DATE_STATUS_UNSPECIFIED",
  CURATED_DATE_STATUS_PENDING = "CURATED_DATE_STATUS_PENDING",
  CURATED_DATE_STATUS_USER1_CONFIRMED = "CURATED_DATE_STATUS_USER1_CONFIRMED",
  CURATED_DATE_STATUS_USER2_CONFIRMED = "CURATED_DATE_STATUS_USER2_CONFIRMED",
  CURATED_DATE_STATUS_BOTH_CONFIRMED = "CURATED_DATE_STATUS_BOTH_CONFIRMED",
  /** CURATED_DATE_STATUS_CONFIRMED - Alias for backward compatibility */
  CURATED_DATE_STATUS_CONFIRMED = "CURATED_DATE_STATUS_CONFIRMED",
  CURATED_DATE_STATUS_CANCELLED = "CURATED_DATE_STATUS_CANCELLED",
  CURATED_DATE_STATUS_COMPLETED = "CURATED_DATE_STATUS_COMPLETED",
  CURATED_DATE_STATUS_NO_SHOW = "CURATED_DATE_STATUS_NO_SHOW",
}

/** Cancellation category - why dates get cancelled */
export enum CancellationCategory {
  CANCELLATION_CATEGORY_UNSPECIFIED = "CANCELLATION_CATEGORY_UNSPECIFIED",
  CANCELLATION_CATEGORY_PERSONAL_EMERGENCY = "CANCELLATION_CATEGORY_PERSONAL_EMERGENCY",
  CANCELLATION_CATEGORY_ILLNESS = "CANCELLATION_CATEGORY_ILLNESS",
  CANCELLATION_CATEGORY_WORK_CONFLICT = "CANCELLATION_CATEGORY_WORK_CONFLICT",
  CANCELLATION_CATEGORY_FAMILY_EMERGENCY = "CANCELLATION_CATEGORY_FAMILY_EMERGENCY",
  CANCELLATION_CATEGORY_TRANSPORTATION = "CANCELLATION_CATEGORY_TRANSPORTATION",
  CANCELLATION_CATEGORY_WEATHER = "CANCELLATION_CATEGORY_WEATHER",
  CANCELLATION_CATEGORY_NOT_INTERESTED = "CANCELLATION_CATEGORY_NOT_INTERESTED",
  CANCELLATION_CATEGORY_OTHER = "CANCELLATION_CATEGORY_OTHER",
}

/** Date series relationship stages - progression tracking */
export enum RelationshipStage {
  RELATIONSHIP_STAGE_UNSPECIFIED = "RELATIONSHIP_STAGE_UNSPECIFIED",
  RELATIONSHIP_STAGE_GETTING_TO_KNOW = "RELATIONSHIP_STAGE_GETTING_TO_KNOW",
  RELATIONSHIP_STAGE_BUILDING_CONNECTION = "RELATIONSHIP_STAGE_BUILDING_CONNECTION",
  RELATIONSHIP_STAGE_STRONG_INTEREST = "RELATIONSHIP_STAGE_STRONG_INTEREST",
  RELATIONSHIP_STAGE_EXCLUSIVE_DATING = "RELATIONSHIP_STAGE_EXCLUSIVE_DATING",
  RELATIONSHIP_STAGE_RELATIONSHIP = "RELATIONSHIP_STAGE_RELATIONSHIP",
}

/** Date series status */
export enum DateSeriesStatus {
  DATE_SERIES_STATUS_UNSPECIFIED = "DATE_SERIES_STATUS_UNSPECIFIED",
  DATE_SERIES_STATUS_ACTIVE = "DATE_SERIES_STATUS_ACTIVE",
  DATE_SERIES_STATUS_PAUSED = "DATE_SERIES_STATUS_PAUSED",
  DATE_SERIES_STATUS_ENDED = "DATE_SERIES_STATUS_ENDED",
}

/** Workflow stages for admin curation - unified workflow */
export enum CurationWorkflowStage {
  CURATION_WORKFLOW_STAGE_UNSPECIFIED = "CURATION_WORKFLOW_STAGE_UNSPECIFIED",
  CURATION_WORKFLOW_STAGE_USER_SELECTION = "CURATION_WORKFLOW_STAGE_USER_SELECTION",
  CURATION_WORKFLOW_STAGE_COMPATIBILITY_CHECK = "CURATION_WORKFLOW_STAGE_COMPATIBILITY_CHECK",
  CURATION_WORKFLOW_STAGE_MATCHING = "CURATION_WORKFLOW_STAGE_MATCHING",
  CURATION_WORKFLOW_STAGE_VENUE_SELECTION = "CURATION_WORKFLOW_STAGE_VENUE_SELECTION",
  CURATION_WORKFLOW_STAGE_SCHEDULING = "CURATION_WORKFLOW_STAGE_SCHEDULING",
  CURATION_WORKFLOW_STAGE_CONFIRMATION = "CURATION_WORKFLOW_STAGE_CONFIRMATION",
  CURATION_WORKFLOW_STAGE_PAYMENT = "CURATION_WORKFLOW_STAGE_PAYMENT",
  CURATION_WORKFLOW_STAGE_REMINDER_SENT = "CURATION_WORKFLOW_STAGE_REMINDER_SENT",
  CURATION_WORKFLOW_STAGE_COMPLETED = "CURATION_WORKFLOW_STAGE_COMPLETED",
  CURATION_WORKFLOW_STAGE_FEEDBACK_COLLECTED = "CURATION_WORKFLOW_STAGE_FEEDBACK_COLLECTED",
}

/** Stage status for workflow tracking */
export enum WorkflowStageStatus {
  WORKFLOW_STAGE_STATUS_UNSPECIFIED = "WORKFLOW_STAGE_STATUS_UNSPECIFIED",
  WORKFLOW_STAGE_STATUS_PENDING = "WORKFLOW_STAGE_STATUS_PENDING",
  WORKFLOW_STAGE_STATUS_IN_PROGRESS = "WORKFLOW_STAGE_STATUS_IN_PROGRESS",
  WORKFLOW_STAGE_STATUS_COMPLETED = "WORKFLOW_STAGE_STATUS_COMPLETED",
  WORKFLOW_STAGE_STATUS_FAILED = "WORKFLOW_STAGE_STATUS_FAILED",
}

/** Sorting options for date queries */
export enum SortBy {
  SORT_BY_UNSPECIFIED = "SORT_BY_UNSPECIFIED",
  SORT_BY_DATE_TIME = "SORT_BY_DATE_TIME",
  SORT_BY_STATUS = "SORT_BY_STATUS",
  SORT_BY_CREATED_AT = "SORT_BY_CREATED_AT",
}

/** Sort order options */
export enum SortOrder {
  SORT_ORDER_UNSPECIFIED = "SORT_ORDER_UNSPECIFIED",
  SORT_ORDER_ASC = "SORT_ORDER_ASC",
  SORT_ORDER_DESC = "SORT_ORDER_DESC",
}

/** Admin priority levels for dating operations */
export enum AdminPriority {
  ADMIN_PRIORITY_UNSPECIFIED = "ADMIN_PRIORITY_UNSPECIFIED",
  ADMIN_PRIORITY_1 = "ADMIN_PRIORITY_1",
  ADMIN_PRIORITY_2 = "ADMIN_PRIORITY_2",
  ADMIN_PRIORITY_3 = "ADMIN_PRIORITY_3",
}

/** Location coordinates for venue information */
export interface LocationCoordinates {
  latitude: number;
  longitude: number;
  address: string;
  placeId: string;
  timezone: string;
}

/** Compatibility factor for matching algorithms */
export interface CompatibilityFactorForAlgo {
  factorName: string;
  score: number;
  weight: number;
  description: string;
}

/** Core compatibility details between users */
export interface CompatibilityDetails {
  user1Id: number;
  user2Id: number;
  overallScore: number;
  factors: CompatibilityFactorForAlgo[];
  algorithmVersion: string;
  calculatedAt: string;
}

/** Unified date feedback structure */
export interface DateFeedback {
  id: string;
  curatedDateId: string;
  userId: number;
  /** Overall experience ratings (1-5) */
  overallRating: number;
  venueRating: number;
  partnerRating: number;
  curationRating: number;
  /** Boolean feedback */
  wouldMeetAgain: boolean;
  wouldRecommendVenue: boolean;
  /** Detailed ratings */
  chemistryRating: number;
  conversationQuality: number;
  partnerPunctuality: number;
  partnerAppearanceMatch: number;
  timingSatisfaction: number;
  durationSatisfaction: number;
  /** Text feedback */
  feedbackText: string;
  whatWentWell: string;
  whatCouldImprove: string;
  favoriteMoment: string;
  suggestedImprovements: string;
  preferredNextDateActivity: string;
  preferredNextDateTiming: string;
  additionalComments: string;
  /** Safety and concerns */
  safetyConcerns: boolean;
  redFlags: string[];
  reportUser: boolean;
  reportReason: string;
  /** Follow-up intentions */
  interestedInSecondDate: boolean;
  preferredContactMethod: string;
  /** Improvement suggestions */
  improvementSuggestions: string[];
  /** Metadata */
  isAnonymous: boolean;
  submittedAt: string;
}

/** Unified date series structure */
export interface DateSeries {
  id: string;
  name: string;
  description: string;
  user1Id: number;
  user2Id: number;
  /** Series metadata */
  seriesStatus: DateSeriesStatus;
  totalDatesInSeries: number;
  completedDates: number;
  curatedDateIds: string[];
  lastDateAt: string;
  nextSuggestedDate: string;
  /** Progression */
  relationshipStage: RelationshipStage;
  /** 1-5 */
  mutualInterestLevel: number;
  adminNotes: string;
  /** Preferences */
  preferredDateFrequency: string;
  preferredDateTypes: string[];
  /** Outcome tracking */
  seriesEndedReason: string;
  endedByUserId: number;
  endedAt: string;
  finalOutcome: string;
  /** Audit */
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

/** Confirm date request */
export interface ConfirmDateRequest {
  curatedDateId: number;
  userId: number;
  confirmed: boolean;
  notes: string;
}

/** Cancel date request */
export interface CancelDateRequest {
  curatedDateId: number;
  userId: number;
  cancellationCategory: CancellationCategory;
  cancellationReason: string;
  requestRefund: boolean;
}

/** Submit date feedback request */
export interface SubmitDateFeedbackRequest {
  curatedDateId: number;
  userId: number;
  overallRating: number;
  wouldMeetAgain: boolean;
  chemistryRating: number;
  conversationQuality: number;
  whatWentWell: string;
  whatCouldImprove: string;
  favoriteMoment: string;
  partnerPunctuality: number;
  partnerAppearanceMatch: number;
  suggestedImprovements: string;
  preferredNextDateActivity: string;
  preferredNextDateTiming: string;
  safetyConcerns: boolean;
  redFlags: string[];
  reportUser: boolean;
  reportReason: string;
  venueRating: number;
  timingSatisfaction: number;
  durationSatisfaction: number;
  interestedInSecondDate: boolean;
  preferredContactMethod: string;
  additionalComments: string;
  isAnonymous: boolean;
}

/** Response messages for common operations */
export interface DateFeedbackResponse {
  success: boolean;
  data?: DateFeedback | undefined;
  message: string;
}

export interface DateSeriesResponse {
  success: boolean;
  data?: DateSeries | undefined;
  message: string;
}

export interface DateSeriesListResponse {
  success: boolean;
  dateSeries: DateSeries[];
  pagination?: PaginationResponse | undefined;
  message: string;
}
