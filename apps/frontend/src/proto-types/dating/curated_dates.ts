// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.28.3
// source: dating/curated_dates.proto

/* eslint-disable */
import type { Coordinates, PaginationRequest, PaginationResponse } from "../common/base";
import type { DateType, RelationshipStage } from "../common/enums";

/** Date status */
export enum CuratedDateStatus {
  CURATED_DATE_STATUS_UNSPECIFIED = "CURATED_DATE_STATUS_UNSPECIFIED",
  CURATED_DATE_STATUS_PENDING = "CURATED_DATE_STATUS_PENDING",
  CURATED_DATE_STATUS_CONFIRMED = "CURATED_DATE_STATUS_CONFIRMED",
  CURATED_DATE_STATUS_CANCELLED = "CURATED_DATE_STATUS_CANCELLED",
  CURATED_DATE_STATUS_COMPLETED = "CURATED_DATE_STATUS_COMPLETED",
  CURATED_DATE_STATUS_NO_SHOW = "CURATED_DATE_STATUS_NO_SHOW",
}

/** Cancellation category */
export enum CancellationCategory {
  CANCELLATION_CATEGORY_UNSPECIFIED = "CANCELLATION_CATEGORY_UNSPECIFIED",
  CANCELLATION_CATEGORY_PERSONAL_EMERGENCY = "CANCELLATION_CATEGORY_PERSONAL_EMERGENCY",
  CANCELLATION_CATEGORY_ILLNESS = "CANCELLATION_CATEGORY_ILLNESS",
  CANCELLATION_CATEGORY_WORK_CONFLICT = "CANCELLATION_CATEGORY_WORK_CONFLICT",
  CANCELLATION_CATEGORY_FAMILY_EMERGENCY = "CANCELLATION_CATEGORY_FAMILY_EMERGENCY",
  CANCELLATION_CATEGORY_TRANSPORTATION = "CANCELLATION_CATEGORY_TRANSPORTATION",
  CANCELLATION_CATEGORY_WEATHER = "CANCELLATION_CATEGORY_WEATHER",
  CANCELLATION_CATEGORY_NOT_INTERESTED = "CANCELLATION_CATEGORY_NOT_INTERESTED",
  CANCELLATION_CATEGORY_OTHER = "CANCELLATION_CATEGORY_OTHER",
}

/** Curation workflow stage */
export enum CurationWorkflowStage {
  CURATION_WORKFLOW_STAGE_UNSPECIFIED = "CURATION_WORKFLOW_STAGE_UNSPECIFIED",
  CURATION_WORKFLOW_STAGE_MATCHING = "CURATION_WORKFLOW_STAGE_MATCHING",
  CURATION_WORKFLOW_STAGE_VENUE_SELECTION = "CURATION_WORKFLOW_STAGE_VENUE_SELECTION",
  CURATION_WORKFLOW_STAGE_SCHEDULING = "CURATION_WORKFLOW_STAGE_SCHEDULING",
  CURATION_WORKFLOW_STAGE_CONFIRMATION = "CURATION_WORKFLOW_STAGE_CONFIRMATION",
  CURATION_WORKFLOW_STAGE_PAYMENT = "CURATION_WORKFLOW_STAGE_PAYMENT",
  CURATION_WORKFLOW_STAGE_COMPLETED = "CURATION_WORKFLOW_STAGE_COMPLETED",
}

/** Curated date */
export interface CuratedDate {
  id: string;
  user1Id: number;
  user2Id: number;
  dateType: DateType;
  status: CuratedDateStatus;
  venueName: string;
  venueAddress: string;
  venueCoordinates?: Coordinates | undefined;
  scheduledDate: string;
  scheduledTime: string;
  estimatedCost: number;
  specialInstructions: string;
  workflowStage: CurationWorkflowStage;
  curatorAdminId: number;
  createdAt: string;
  updatedAt: string;
  confirmedAt: string;
  cancelledAt: string;
  cancellationCategory: CancellationCategory;
  cancellationReason: string;
  cancelledByUserId: number;
}

/** Date feedback */
export interface DateFeedback {
  id: string;
  curatedDateId: string;
  userId: number;
  overallRating: number;
  venueRating: number;
  partnerRating: number;
  curationRating: number;
  feedbackText: string;
  wouldRecommendVenue: boolean;
  wouldDatePartnerAgain: boolean;
  improvementSuggestions: string[];
  isAnonymous: boolean;
  submittedAt: string;
}

/** Date series */
export interface DateSeries {
  id: string;
  name: string;
  description: string;
  user1Id: number;
  user2Id: number;
  curatedDateIds: string[];
  totalDates: number;
  completedDates: number;
  relationshipStage: RelationshipStage;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

/** Compatibility details */
export interface CompatibilityDetails {
  user1Id: number;
  user2Id: number;
  overallScore: number;
  factors: CompatibilityFactor[];
  algorithmVersion: string;
  calculatedAt: string;
}

/** Compatibility factor */
export interface CompatibilityFactor {
  factorName: string;
  score: number;
  weight: number;
  description: string;
}

/** Request messages */
export interface CreateCuratedDateRequest {
  user1Id: number;
  user2Id: number;
  dateType: DateType;
  preferredDate: string;
  preferredTime: string;
  preferredVenueType: string;
  specialRequests: string;
  budgetLimit: number;
}

export interface UpdateCuratedDateRequest {
  curatedDateId: string;
  status: CuratedDateStatus;
  venueName: string;
  venueAddress: string;
  venueCoordinates?: Coordinates | undefined;
  scheduledDate: string;
  scheduledTime: string;
  estimatedCost: number;
  specialInstructions: string;
  workflowStage: CurationWorkflowStage;
}

export interface ConfirmDateRequest {
  curatedDateId: string;
  userId: number;
  isConfirmed: boolean;
  notes: string;
}

export interface CancelDateRequest {
  curatedDateId: string;
  userId: number;
  cancellationCategory: CancellationCategory;
  cancellationReason: string;
  requestRefund: boolean;
}

export interface SubmitDateFeedbackRequest {
  curatedDateId: string;
  userId: number;
  overallRating: number;
  venueRating: number;
  partnerRating: number;
  curationRating: number;
  feedbackText: string;
  wouldRecommendVenue: boolean;
  wouldDatePartnerAgain: boolean;
  improvementSuggestions: string[];
  isAnonymous: boolean;
}

export interface GetCuratedDatesRequest {
  userId: number;
  statuses: CuratedDateStatus[];
  startDate: string;
  endDate: string;
  pagination?: PaginationRequest | undefined;
}

/** Response messages */
export interface CuratedDateResponse {
  success: boolean;
  data?: CuratedDate | undefined;
  message: string;
}

export interface CuratedDatesListResponse {
  success: boolean;
  dates: CuratedDate[];
  pagination?: PaginationResponse | undefined;
  message: string;
}

export interface DateFeedbackResponse {
  success: boolean;
  data?: DateFeedback | undefined;
  message: string;
}

export interface DateSeriesResponse {
  success: boolean;
  data?: DateSeries | undefined;
  message: string;
}
