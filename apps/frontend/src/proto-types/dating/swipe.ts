// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.28.3
// source: dating/swipe.proto

/* eslint-disable */
import type { LocationInfo, PaginationRequest, PaginationResponse } from "../common/base";

/** Auth view types */
export enum AuthView {
  AUTH_VIEW_UNSPECIFIED = "AUTH_VIEW_UNSPECIFIED",
  AUTH_VIEW_LOGIN = "AUTH_VIEW_LOGIN",
  AUTH_VIEW_SIGNUP = "AUTH_VIEW_SIGNUP",
  AUTH_VIEW_FORGOT_PASSWORD = "AUTH_VIEW_FORGOT_PASSWORD",
}

/** Swipe action types */
export enum SwipeAction {
  SWIPE_ACTION_UNSPECIFIED = "SWIPE_ACTION_UNSPECIFIED",
  SWIPE_ACTION_LIKE = "SWIPE_ACTION_LIKE",
  SWIPE_ACTION_PASS = "SWIPE_ACTION_PASS",
  SWIPE_ACTION_SUPERLIKE = "SWIPE_ACTION_SUPERLIKE",
}

/** Match status */
export enum MatchStatus {
  MATCH_STATUS_UNSPECIFIED = "MATCH_STATUS_UNSPECIFIED",
  MATCH_STATUS_PENDING = "MATCH_STATUS_PENDING",
  MATCH_STATUS_MATCHED = "MATCH_STATUS_MATCHED",
  MATCH_STATUS_UNMATCHED = "MATCH_STATUS_UNMATCHED",
  MATCH_STATUS_BLOCKED = "MATCH_STATUS_BLOCKED",
}

/** Auth modal state */
export interface AuthModalState {
  isOpen: boolean;
  currentView: AuthView;
}

/** Form field errors */
export interface FormFieldErrors {
  errors: { [key: string]: string };
}

export interface FormFieldErrors_ErrorsEntry {
  key: string;
  value: string;
}

/** Signup form data */
export interface SignupFormData {
  email: string;
  password: string;
  confirmPassword: string;
  firstName: string;
  lastName: string;
  agreeToTerms: boolean;
  subscribeToNewsletter: boolean;
}

/** Login form data */
export interface LoginFormData {
  email: string;
  password: string;
  rememberMe: boolean;
}

/** Forgot password form data */
export interface ForgotPasswordFormData {
  email: string;
}

/** User data for dating */
export interface UserData {
  id: number;
  email: string;
  firstName: string;
  lastName: string;
  age: number;
  gender: string;
  location: string;
  profileImageUrl: string;
  additionalImages: string[];
  bio: string;
  interests: string[];
  isVerified: boolean;
  isPremium: boolean;
  lastSeen?: string | undefined;
  distanceKm: number;
}

/** Extended user profile for dating */
export interface DatifyyUserProfile {
  id: number;
  email: string;
  firstName: string;
  lastName: string;
  dateOfBirth?: string | undefined;
  gender: string;
  sexualOrientation: string;
  location?: LocationInfo | undefined;
  profileImageUrl: string;
  additionalImages: string[];
  bio: string;
  occupation: string;
  company: string;
  educationLevel: string;
  school: string;
  interests: string[];
  languages: string[];
  religion: string;
  politicalView: string;
  smokingPreference: string;
  drinkingPreference: string;
  exerciseLevel: string;
  dietaryPreference: string;
  petPreference: string;
  childrenStatus: string;
  wantChildren: string;
  relationshipGoal: string;
  personalityType: string;
  zodiacSign: string;
  musicGenres: string[];
  movieGenres: string[];
  isVerified: boolean;
  isPremium: boolean;
  isActive: boolean;
  completionStats?: ProfileCompletionStats | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

/** Partner preferences for dating */
export interface DatifyyUserPartnerPreferences {
  userId: number;
  genderPreference: string;
  minAge: number;
  maxAge: number;
  maxDistanceKm: number;
  interests: string[];
  languages: string[];
  educationLevels: string[];
  religions: string[];
  politicalViews: string[];
  smokingPreferences: string[];
  drinkingPreferences: string[];
  exerciseLevels: string[];
  dietaryPreferences: string[];
  petPreferences: string[];
  childrenStatuses: string[];
  wantChildrenOptions: string[];
  relationshipGoals: string[];
  personalityTypes: string[];
  minHeight: number;
  maxHeight: number;
  mustBeVerified: boolean;
  minCompatibilityScore: number;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

/** Swipe data */
export interface SwipeData {
  id: string;
  swiperId: number;
  swipedUserId: number;
  action: SwipeAction;
  swipedAt?: string | undefined;
  isMatch: boolean;
  matchId: string;
}

/** Match data */
export interface MatchData {
  id: string;
  user1Id: number;
  user2Id: number;
  status: MatchStatus;
  matchedAt?: string | undefined;
  lastInteractionAt?: string | undefined;
  messageCount: number;
  user1Liked: boolean;
  user2Liked: boolean;
  user1Superliked: boolean;
  user2Superliked: boolean;
  compatibilityScore: number;
  commonInterests: string[];
  unmatchedAt?: string | undefined;
  unmatchedBy: number;
  unmatchReason: string;
}

/** Distance info */
export interface DistanceInfo {
  distanceKm: number;
  distanceMiles: number;
  displayText: string;
  isNearby: boolean;
}

/** Profile card data */
export interface ProfileCardData {
  user?: UserData | undefined;
  distance?: DistanceInfo | undefined;
  lastSeen?: LastSeenInfo | undefined;
  age?: AgeInfo | undefined;
  topInterests: string[];
  hasBeenSwiped: boolean;
  previousAction: SwipeAction;
  compatibilityScore: number;
  mutualFriends: string[];
  isOnline: boolean;
}

/** Last seen info */
export interface LastSeenInfo {
  timestamp?: string | undefined;
  displayText: string;
  isOnline: boolean;
  isRecent: boolean;
}

/** Age info */
export interface AgeInfo {
  years: number;
  displayText: string;
  isInPreferredRange: boolean;
}

/** Validation result */
export interface ValidationResult {
  isValid: boolean;
  errors: { [key: string]: string };
}

export interface ValidationResult_ErrorsEntry {
  key: string;
  value: string;
}

/** Profile completion stats */
export interface ProfileCompletionStats {
  overallPercentage: number;
  hasProfilePhoto: boolean;
  hasBio: boolean;
  hasInterests: boolean;
  hasEducation: boolean;
  hasOccupation: boolean;
  hasLifestyle: boolean;
  hasPartnerPreferences: boolean;
  photoCount: number;
  interestCount: number;
  missingFields: string[];
  suggestions: string[];
}

/** Request messages */
export interface GetSwipeProfilesRequest {
  userId: number;
  limit: number;
  excludeUserIds: number[];
  includeCompatibilityScore: boolean;
}

export interface RecordSwipeRequest {
  swiperId: number;
  swipedUserId: number;
  action: SwipeAction;
  timeSpentSeconds: number;
  /** profile_card, quick_swipe, etc. */
  source: string;
}

export interface GetMatchesRequest {
  userId: number;
  statuses: MatchStatus[];
  includeUnread: boolean;
  pagination?: PaginationRequest | undefined;
}

export interface UnmatchRequest {
  matchId: string;
  userId: number;
  reason: string;
  blockUser: boolean;
}

/** Response messages */
export interface GetSwipeProfilesResponse {
  success: boolean;
  profiles: ProfileCardData[];
  remainingToday: number;
  resetsAt?: string | undefined;
  message: string;
}

export interface RecordSwipeResponse {
  success: boolean;
  isMatch: boolean;
  match?: MatchData | undefined;
  remainingSwipes: number;
  message: string;
}

export interface GetMatchesResponse {
  success: boolean;
  matches: MatchData[];
  pagination?: PaginationResponse | undefined;
  statistics?: MatchStatistics | undefined;
  message: string;
}

export interface MatchStatistics {
  totalMatches: number;
  activeMatches: number;
  newMatches: number;
  unreadMessages: number;
  averageCompatibility: number;
}

export interface UnmatchResponse {
  success: boolean;
  message: string;
}
